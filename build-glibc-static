#!/bin/bash
# Build script for glibc static tools
# This handles tools that require glibc instead of musl
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Default values
TOOL="all"
ARCH="all"
DEBUG=""
CLEAN=false
INTERACTIVE=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --arch)
            ARCH="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG="1"
            shift
            ;;
        --clean)
            CLEAN=true
            shift
            ;;
        -i|--interactive)
            INTERACTIVE=true
            shift
            ;;
        --help|-h)
            cat << EOF
Usage: $0 [TOOL] [OPTIONS]

Build glibc-based static tools.

TOOL:
  all       Build all glibc tools (default)
  ltrace    Library call tracer

OPTIONS:
  --arch ARCH      Build for specific architecture only
  --arch all       Build for all supported architectures (default)
  -d, --debug      Debug mode (verbose output)
  -i, --interactive  Launch interactive shell in build container
  --clean          Clean output directories

SUPPORTED ARCHITECTURES (limited for glibc static):
  x86_64 aarch64 arm32v7le i486

EXAMPLES:
  $0                          # Build all tools for all architectures
  $0 ltrace                   # Build ltrace for all architectures
  $0 ltrace --arch x86_64    # Build ltrace for x86_64 only

OUTPUT:
  Binaries are placed in: output-glibc-static/<arch>/

NOTE:
  Glibc static builds have limitations due to NSS and other dynamic
  components. These tools may still require certain runtime libraries.
EOF
            exit 0
            ;;
        ltrace)
            TOOL="$1"
            shift
            ;;
        *)
            if [[ "$1" =~ ^(x86_64|aarch64|arm32v7le|i486|mips64le|ppc64le|riscv64|s390x)$ ]]; then
                ARCH="$1"
            else
                echo "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
            fi
            shift
            ;;
    esac
done

# Handle clean
if [ "$CLEAN" = true ]; then
    echo "Cleaning glibc static build artifacts..."
    rm -rf output-glibc-static/
    rm -rf logs-glibc-static/
    echo "Clean complete."
    exit 0
fi

# Check if Docker is available
if ! command -v docker &> /dev/null; then
    echo "Error: Docker is required but not installed"
    exit 1
fi

# Build Docker image if needed
IMAGE_NAME="sthenos-glibc-static-builder"
if ! docker images | grep -q "^${IMAGE_NAME} "; then
    echo "Building glibc static Docker image..."
    docker build -t "${IMAGE_NAME}" -f Dockerfile.glibc-static . || {
        echo "Failed to build Docker image"
        exit 1
    }
fi

# Prepare directories
mkdir -p output-glibc-static
mkdir -p logs-glibc-static
mkdir -p sources

# Build command
DOCKER_CMD="docker run --rm"
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/output-glibc-static:/build/output-glibc-static"
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/logs-glibc-static:/build/logs-glibc-static"
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/scripts:/build/scripts:ro"
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/sources:/build/sources"

# Add environment variables
[ -n "$DEBUG" ] && DOCKER_CMD="$DOCKER_CMD -e DEBUG=1"

if [ "$INTERACTIVE" = true ]; then
    echo "Launching interactive shell in glibc static build container..."
    echo "Build scripts are in: /build/scripts/"
    echo "Output goes to: /build/output-glibc-static/"
    exec $DOCKER_CMD -it "${IMAGE_NAME}" bash
fi

# Build mode
echo "===================================="
echo "Glibc Static Build Pipeline"
echo "===================================="
echo "Tool: $TOOL"
echo "Architecture: $ARCH"
echo "Start time: $(date)"
echo

# Execute build
BUILD_CMD="/build/scripts/build-unified-glibc.sh $TOOL $ARCH"
$DOCKER_CMD "${IMAGE_NAME}" $BUILD_CMD

# Show results
if [ -d "output-glibc-static" ]; then
    echo
    echo "=== Build Results ==="
    for arch_dir in output-glibc-static/*/; do
        if [ -d "$arch_dir" ]; then
            arch=$(basename "$arch_dir")
            echo "$arch:"
            ls -lh "$arch_dir" 2>/dev/null | grep -v "^total" | awk '{print "  " $9 " (" $5 ")"}' || echo "  (no files built)"
        fi
    done
fi

echo
echo "Build completed at: $(date)"